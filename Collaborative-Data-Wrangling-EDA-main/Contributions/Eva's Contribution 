### Data Wrangling and Exploratory Analysis of Spotify Dataset
#### Performed by: Eva Kaushik

#### 1. Repository Setup and Environment
Created a GitHub repository(Collaborative-Data-Wrangling-EDA) and cloned it to Visual Studio.
Created a dedicated branch: Data-Wrangling-&-EDA.
Set up Python virtual environment (venv) for reproducibility via terminal (screenshot attested)
Initial dataset exploration and DataFrame creation to prepare for major tasks.

#### 2. Data Cleaning / Pre-Processing
##### Objective: Ensure dataset consistency, handle duplicates, and standardize formats.
Re-ran the cleaning script by Eric and added further pre-processing steps.
1. Standardized column names (lowercase, replaced spaces with underscores).
2. Removed duplicate entries (checked track_id).
3. Converted track duration from seconds to minutes (float, 2 decimals).
4. Checked categorical consistency for key, mode, and time_signature.
5. Saved cleaned dataset in /data folder.

##### Outcome: Cleaned dataset ready for analysis, squash commit pushed (Data Cleaning/Eva) and merged via pull request (PR1: Screenshot added)

#### 3. Exploratory Data Analysis (EDA)
##### Objective: Understand distribution and relationships of key audio features.
Key Analyses:
1. Loaded cleaned dataset and verified column names.
2. Calculated summary statistics: mean, median, correlation.
3. Visualizations:
Histogram of track duration
Scatter plot: Danceability vs Energy
Correlation heatmap of numerical features

##### Outcome: Provided baseline understanding of feature distributions and correlations created. Squash commit changes and created PR (CODE COMMIT/EDA) and merged (PR2: Screenshot added)

#### 4. Advanced EDA
##### Objective: Perform deeper pattern recognition and feature exploration.
Analyses performed:
1. Top 10 artists by track count
2. Average popularity by genre
3. Energy vs Danceability density plot
4. Pair plots of selected audio features
5. Boxplots of popularity by key
Additional Pattern Recognition:
PCA performed on key audio features (danceability, energy, valence, etc.)
Computed genre centroids in PCA space for visual cluster comparison
Scatter plots annotated with genre centroids (with reduced crowding for clarity)

Conflict Resolution: I faced merge conflict while commiting changes, resolved it via bash and then created PR to merge. 

##### Outcome: Revealed feature-space structure of genres and patterns in popularity and energy/danceability distribution (PR3 & Cnflict Resolution screenshot added)

#### 5. Predictive Modeling (PCA/Pattern Recognition)
##### Objective: Assess whether audio features predict track popularity.
Steps:
1. Created popularity buckets: low, medium, high.
2. Split dataset into train/test sets (70/30).
3. Trained a Random Forest classifier (n_estimators=100).
4. Oversampling applied via SMOTE to handle class imbalance.
5. Evaluated model using classification report (precision, recall, F1).

##### Outcome: Demonstrated predictive capability of audio features for popularity classification. commit changes, created PR (CODE COMMIT/Pattern Recognition) and merged. (Screenshot Added)

Additional: Created Readme.md and added entire content alongwith creating Contributions.md to enlist contributions.

#### Notes: Reproducibility & Documentation
All changes committed to GitHub with detailed pull requests description. Merge conflicts resolved via Git Bash, ensuring version control integrity and included screenshots for environment setup and commits.